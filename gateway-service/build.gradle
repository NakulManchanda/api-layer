buildscript {
    repositories mavenRepositories
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additionalProperties = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    //compile(project(':common-service-core'))
    compile(project(':onboarding-enabler-spring-v2'))

    implementation(project(':apiml-security-common'))

    implementation libraries.ribbon_eureka
    //implementation libraries.spring_cloud_starter_eureka
    implementation libraries.spring_cloud_starter_zuul
    implementation libraries.spring_cloud_starter_ribbon

    implementation libraries.spring_boot_starter_actuator
    implementation libraries.spring_boot_starter_web
    implementation libraries.spring_boot_starter_websocket
    implementation libraries.spring_boot_starter_thymeleaf

    implementation libraries.spring_security_web
    implementation libraries.spring_security_config

    implementation libraries.tomcat_coyote
    implementation libraries.tomcat_embed_core
    implementation libraries.jetty_websocket_client
    implementation libraries.jjwt

    compileOnly libraries.lombok

    testCompile libraries.spring_mock_mvc
    testCompile libraries.spring_boot_starter_test
    testRuntime libraries.http_client
    testCompile libraries.rest_assured
    testCompile libraries.lombok
}

bootJar.archiveName = "${bootJar.baseName}.jar"


bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}
